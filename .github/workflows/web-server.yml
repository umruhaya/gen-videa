name: Build, Push and Deploy to GKE

on:
  push:
    branches:
      - development
      - staging
      - production

    paths:
      - web-server/**

  workflow_dispatch:

jobs:
  DockerImagePushAndDeploy:
    runs-on: ubuntu-latest
    env: # Define environment variables for the entire job
      IMAGE_NAME: web-server
      IMAGE_TAG: ${{ github.sha }}
      GCP_PROJECT_ID: jetrr-vision
      GCR_HOSTNAME: us-central1-docker.pkg.dev
      GCR_REPOSITORY: genvidea-main
      CLUSTER_NAME: genvidea-cluster
      CLUSTER_LOCATION: us-central1-f
      BRANCH_NAME: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.25.1/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Configure docker for GCP
        run: gcloud auth configure-docker ${{ env.GCR_HOSTNAME }}

      - name: Setup project in GCP
        run: gcloud config set project ${{ env.GCP_PROJECT_ID }}

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.CLUSTER_LOCATION }}

      - name: Build and tag Docker image
        run: |
          SHORT_SHA=$(echo $IMAGE_TAG | cut -c1-7)
          docker build -t $GCR_HOSTNAME/$GCP_PROJECT_ID/$GCR_REPOSITORY/$IMAGE_NAME:$BRANCH_NAME-$SHORT_SHA .
        working-directory: ./web-server

      - name: Push Docker image to Artifact Registry
        run: |
          SHORT_SHA=$(echo $IMAGE_TAG | cut -c1-7)
          docker push $GCR_HOSTNAME/$GCP_PROJECT_ID/$GCR_REPOSITORY/$IMAGE_NAME:$BRANCH_NAME-$SHORT_SHA

      - name: Update deployment file with the new image tag
        run: |
          SHORT_SHA=$(echo $IMAGE_TAG | cut -c1-7)
          yq eval ".spec.template.spec.containers[0].image = \"${GCR_HOSTNAME}/${GCP_PROJECT_ID}/${GCR_REPOSITORY}/${IMAGE_NAME}:${BRANCH_NAME}-${SHORT_SHA}\" | \
            .spec.template.spec.containers[0].env[0].value = \"${BRANCH_NAME}\" | \
            .metadata.namespace = \"${BRANCH_NAME}\"" deployment.yml > deployment-new.yml
        working-directory: ./web-server

      - name: Deploy to GKE
        run: kubectl apply -f deployment-new.yml
        working-directory: ./web-server
